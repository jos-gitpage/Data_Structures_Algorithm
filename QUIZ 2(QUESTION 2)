#include <iostream>

using namespace std;

class LinkedListNode {
public:
    int val;
    LinkedListNode* next;
    LinkedListNode(int x) : val(x), next(nullptr) {}
};

LinkedListNode* detectCycle(LinkedListNode* head) {
    if (!head || !head->next)
        return nullptr;

    LinkedListNode* slow = head;
    LinkedListNode* fast = head;

    // Detect the cycle
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            break;
    }

    // If there's no cycle, return nullptr
    if (fast == nullptr || fast->next == nullptr)
        return nullptr;

    // Move one pointer to the head, and then move both pointers at the same pace until they meet
    slow = head;
    while (slow != fast) {
        slow = slow->next;
        fast = fast->next;
    }

    return slow; // Return the node where the cycle begins
}

int main() {
    // Example 1
    LinkedListNode* head1 = new LinkedListNode(12);
    head1->next = new LinkedListNode(25);
    head1->next->next = new LinkedListNode(10);
    head1->next->next->next = new LinkedListNode(-21);
    head1->next->next->next->next = head1->next; // Cycle

    LinkedListNode* cycleStart1 = detectCycle(head1);
    if (cycleStart1 != nullptr)
        cout << "Cycle starts at node with value: " << cycleStart1->val << endl;
    else
        cout << "No cycle" << endl;

    // Freeing memory
    delete head1->next->next->next->next;
    delete head1->next->next->next;
    delete head1->next->next;
    delete head1->next;
    delete head1;

    // Example 2
    LinkedListNode* head2 = new LinkedListNode(1);
    head2->next = new LinkedListNode(2);
    head2->next->next = head2; // Cycle

    LinkedListNode* cycleStart2 = detectCycle(head2);
    if (cycleStart2 != nullptr)
        cout << "Cycle starts at node with value: " << cycleStart2->val << endl;
    else
        cout << "No cycle" << endl;

    // Freeing memory
    delete head2->next->next;
    delete head2->next;
    delete head2;

    // Example 3
    LinkedListNode* head3 = new LinkedListNode(1); // No cycle

    LinkedListNode* cycleStart3 = detectCycle(head3);
    if (cycleStart3 != nullptr)
        cout << "Cycle starts at node with value: " << cycleStart3->val << endl;
    else
        cout << "No cycle" << endl;

    // Freeing memory
    delete head3;

    return 0;
}
